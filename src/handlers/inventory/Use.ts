import { ActionRowBuilder, ButtonInteraction, EmbedBuilder, GuildMember, MessageCreateOptions, StringSelectMenuBuilder } from "discord.js";
import Client from "../../structure/Client";
import { ErrorEmbeds } from "../../Utils/Components";
import SelectUser from "./SelectUser";
import { ItemParameter, ItemBase, ItemsType, StatusType } from "../../types";

export default async (client: Client, interaction: ButtonInteraction, Select: ItemBase) => {
    const Member = interaction.guild?.members.cache.get(interaction.user.id) || await interaction.guild?.members.fetch(interaction.user.id)

    if (!Member?.voice.channelId) return interaction.editReply({ embeds: [ErrorEmbeds.NotVoiceChannel()] })

    const Item = await client.Database.Items(Select.ItemId) as ItemsType

    const ItemNameFormat = `${Item.Base.ItemId} ${Item.Base.EmojiId ? Item.Base.EmojiId : ''} ${Item.Base.ItemName}`

    const SelectMenu = new StringSelectMenuBuilder()
        .setCustomId('type')
        .setMinValues(1)
        .setPlaceholder('‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°')

    const TypeUse = Item.ConditionItem.TypeUse

    if (!TypeUse) return interaction.editReply({
        content: `‚ùå ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ`
    })

    if (TypeUse.Me) SelectMenu.addOptions({
        label: TypeUse.MeMessage ?? '1.üîµ‡πÉ‡∏ä‡πâ,‡∏Å‡∏¥‡∏ô,‡∏î‡∏∑‡πà‡∏°,‡∏™‡∏ß‡∏°‡πÉ‡∏™‡πà,‡∏ú‡∏™‡∏≤‡∏ô',
        description: '‡∏™‡πà‡∏á‡∏ú‡∏°‡∏ï‡πà‡∏≠‡∏ï‡∏ô‡πÄ‡∏≠‡∏á',
        value: 'me',
    })

    if (TypeUse.Accept) SelectMenu.addOptions({
        label: TypeUse.AcceptMessage ?? '2.üü°‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏ô‡∏î‡∏∑‡πà‡∏°,‡∏™‡∏ß‡∏°‡πÉ‡∏™‡πà‡πÉ‡∏´‡πâ',
        description: '‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô ‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°',
        value: 'accept',
    })

    if (TypeUse.NotAccept) SelectMenu.addOptions({
        label: TypeUse.NotAcceptMessage ?? '3.üî¥‡πÇ‡∏à‡∏°‡∏ï‡∏µ,‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô',
        description: '‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°',
        value: 'notaccept'
    })

    if (TypeUse.Farm) SelectMenu.addOptions({
        label: TypeUse.FarmMessage ?? '4.üü¢‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä, ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á',
        description: '‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏≤‡∏°',
        value: 'build'
    })

    if (!SelectMenu.options.length) return interaction.editReply({
        content: `‚ùå ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ`
    })

    const ActionTypeMessage = await interaction.editReply({
        embeds: [
            new EmbedBuilder()
                .setTitle(`‚úÖ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ( ${ItemNameFormat} )`)
        ],
        components: [
            new ActionRowBuilder<StringSelectMenuBuilder>()
                .addComponents(SelectMenu)
        ]
    })

    const ActionInteraction = await ActionTypeMessage.awaitMessageComponent({
        filter: (inter) => inter.user.id == interaction.user.id,
        time: 60_000
    })

    if (!ActionInteraction) return
    if (!ActionInteraction.isStringSelectMenu()) return

    await ActionInteraction.deferUpdate()

    let TargetId: string | undefined = undefined

    switch (ActionInteraction.values[0]) {
        case 'me':
            break;
        case 'accept':
            TargetId = await SelectUser({
                interaction,
                Member: Member as GuildMember,
                Embed: new EmbedBuilder()
                    .setTitle(`üü° ‡∏õ‡πâ‡∏≠‡∏ô ( ${ItemNameFormat} ) ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‚ùì`)
                    .setColor('Yellow')
            })
            break;
        case 'notaccept':
            TargetId = await SelectUser({
                interaction,
                Member: Member as GuildMember,
                Embed: new EmbedBuilder()
                    .setTitle(`üî¥ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ( ${ItemNameFormat} ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏à‡∏°‡∏ï‡∏µ`)
                    .setColor('Red')
            })
            break;
        case 'build':
            break;
    }

    const { UserId, ItemId, ItemDate, ItemCount } = Select

    try {
        await interaction.editReply({ content: '**‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô**', embeds: [], components: [] })

        const command: {
            default: (ItemParameter: ItemParameter) => Promise<StatusType>
        } = require(`../Item/Type/${Item.Type}`)

        if (Select.Locked) return await interaction.editReply({ content: '‚ùå **‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà**' })

        await client.Database.Inventorys.updateOne({ UserId, ItemId, ItemDate, ItemCount }, { $set: { Select: false, Locked: true } })

        const result = await command.default({
            client: client,
            Member: Member,
            ItemTarget: Select,
            interaction: interaction as any,
            Target: TargetId ? await interaction.guild?.members.fetch(TargetId) : undefined,
            AcceptCheck: ActionInteraction.values[0] == 'accept',
        })

        await client.Database.Inventorys.updateOne({ UserId, ItemId, ItemDate, ItemCount }, { $set: { Select: false, Locked: false } })

        if (result.message) return interaction.editReply(result.message)
    } catch (err) {
        await client.Database.Inventorys.updateOne({ UserId, ItemId, ItemDate, ItemCount }, { $set: { Locked: false } })

        client.log.try_catch_Handling('üî¥', `ItemExecute (${UserId} | ${ItemId}): ${err}`)

        return interaction.editReply({ content: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err}` })
    }
}