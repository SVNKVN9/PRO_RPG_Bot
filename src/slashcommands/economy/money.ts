import { CommandInteraction, EmbedBuilder, SlashCommandBuilder } from "discord.js";
import Client from "../../structure/Client";
import { NumberWithCommas } from "../../Utils/Function";

export default {
    data: [
        new SlashCommandBuilder()
            .setName('money')
            .setDescription('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô / ‡∏•‡∏ö‡πÄ‡∏á‡∏¥‡∏ô')
            .addUserOption(option => option.setName('‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô').setDescription('‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô').setRequired(true))
            .addNumberOption(option => option.setName('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô').setDescription('‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢').setRequired(true)),
    ],

    execute: async (client: Client, interaction: CommandInteraction) => {
        if (!client.config.OnwerIds.includes(interaction.user.id)) return interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ', ephemeral: true })

        const [target, amount] = interaction.options.data

        await client.Database.Users.updateOne({ UserId: target.user?.id }, { $inc: { cash: parseInt(amount.value as string) } })

        if (parseInt(amount.value as string) > 0) {
            interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setDescription(`üü¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á <@${interaction.user.id}> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö <@${target.user?.id}> ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ \n\n **üí∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô** \n \`\`\` +${NumberWithCommas(parseInt(amount.value as string))} ‡πÅ‡∏Å‡∏ô\`\`\``)
                        .setColor('Green')
                        .setTimestamp()
                ]
            })
        } else {
            interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setDescription(`üî¥ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á <@${interaction.user.id}> ‡∏•‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å <@${target.user?.id}> ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ \n\n **üí∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô** \n \`\`\` ${NumberWithCommas(parseInt(amount.value as string))} ‡πÅ‡∏Å‡∏ô\`\`\``)
                        .setColor('Red')
                        .setTimestamp()
                ]
            })
        }

    }
}