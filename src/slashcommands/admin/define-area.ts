import { CommandInteraction, EmbedBuilder, PermissionFlagsBits, SlashCommandBuilder, codeBlock } from "discord.js";
import Client from "../../structure/Client";
import { TypeF } from "../../types";

export default {
    data: [
        new SlashCommandBuilder()
            .setName('define-area')
            .setDescription('DefineArea')
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
            .addIntegerOption(option => option
                .setName('size')
                .setDescription('‡∏Ç‡∏ô‡∏≤‡∏î')
                // .setRequired(true)
            )
    ],
    execute: async (client: Client, interaction: CommandInteraction) => {
        const size = interaction.options.get('size')?.value

        if (!client.config.OnwerIds.includes(interaction.user.id)) return interaction.reply({ content: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ' })

        const isChannel = await client.Database.FarmChannels.findOne({ Id: interaction.channelId })

        if (isChannel) {
            const Farms = await client.Database.Farm.find({ ChannelId: interaction.channelId }).toArray()

            const Items = await Promise.all(Farms.map(async Farm => await client.Database.Items(Farm.ItemId))) as TypeF[]

            return interaction.reply({
                embeds: [
                    new EmbedBuilder()
                        .setTitle(`üå±üå±  ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏•‡∏π‡∏Å  üå±üå±`)
                        .addFields({
                            name: `‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πà‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡πà‡∏≠`,
                            value: codeBlock(`${isChannel.size - Items.reduce((p, c) => p + parseInt(c.FarmProperties.Area as string), 0) } ‡∏ä‡πà‡∏≠‡∏á`)
                        })
                ]
            })
        }

        if (!size) return interaction.reply({ content: '**‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å**' })

        await client.Database.FarmChannels.insertOne({ Id: interaction.channelId, size: size, FarmIds: [] })

        interaction.reply({ content: '‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏•‡∏π‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß' })
    }
}