import { Colors, CommandInteraction, EmbedBuilder, PermissionFlagsBits, SlashCommandBuilder } from "discord.js";
import Client from "../../structure/Client";
import give from '../../Utils/give'
import { ItemsType } from "../../types";

type condition = 'onheadphone-onmic' | 'onheadphone-offmic' | 'everyone'

export default {
    data: [
        new SlashCommandBuilder()
            .setName('give')
            .setDescription('‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°')
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
            .addSubcommand(subcommand => subcommand
                .setName('all')
                .setDescription('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
                .addStringOption(option => option
                    .setName('item-id')
                    .setDescription('‡πÑ‡∏≠‡∏î‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°')
                    .setRequired(true)
                )
                .addIntegerOption(option => option
                    .setName('quantity')
                    .setDescription('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')
                    .setRequired(true)
                )
                .addStringOption(option => option
                    .setName('condition')
                    .setDescription('‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç')
                    .addChoices(
                        {
                            name: '‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏π‡∏ü‡∏±‡∏á ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå',
                            value: 'onheadphone-onmic'
                        },
                        {
                            name: '‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏π‡∏ü‡∏±‡∏á ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå',
                            value: 'onheadphone-offmic'
                        },
                        {
                            name: '‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á ',
                            value: 'everyone'
                        }
                    )
                    .setRequired(true)
                )
                .addStringOption(option => option
                    .setName('description')
                    .setDescription('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏')
                )
            )
    ],
    execute: async (client: Client, interaction: CommandInteraction) => {
        if (!client.config.OnwerIds.includes(interaction.user.id)) return interaction.reply({ ephemeral: true, content: '**‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ**' })

        const ItemId = interaction.options.get('item-id')?.value as string
        const quantity = parseInt(interaction.options.get('quantity')?.value as string) as number
        const condition = interaction.options.get('condition')?.value as condition
        const description = interaction.options.get('description')?.value

        const Member = interaction.guild?.members.cache.get(interaction.user.id)

        if (!Member?.voice.channel) return interaction.reply({ ephemeral: true, content: '**‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á**' })

        await interaction.deferReply()

        let members = Member.voice.channel?.members.toJSON().map((member) => member.voice)

        if (condition == 'onheadphone-onmic') members = members.filter((voice) => !voice.selfDeaf && !voice.selfMute)
        else if (condition == 'onheadphone-offmic') members = members.filter((voice) => !voice.selfDeaf && voice.selfMute)

        let UserIds = members.map(voice => voice.id).filter((UserId) => UserId != interaction.user.id)

        await give(client, null, UserIds, ItemId, quantity)

        const Item = await client.Database.Items(ItemId) as ItemsType

        return interaction.editReply({
            embeds: [
                new EmbedBuilder()
                    .setDescription(`üéÅ <@${interaction.user.id}> ‡πÉ‡∏´‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á <#${Member.voice.channel.id}> ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ`)
                    .addFields(
                        {
                            name: '‚ùï ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç',
                            value: `\`${condition == 'onheadphone-onmic' ? '‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏π‡∏ü‡∏±‡∏á ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå' : condition == 'onheadphone-offmic' ? '‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏π‡∏ü‡∏±‡∏á ‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡∏Ñ‡πå' : '‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á'}\``
                        },
                        {
                            name: 'üéÅ ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ',
                            value: `${Item.Base.ItemId}${Item.Base.EmojiId ?? ''}${Item.Base.ItemName} \`(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${quantity})\``
                        },
                        {
                            name: 'üòä ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°',
                            value: `${UserIds.map(UserId => `<@${UserId}>`).join('\n')}`
                        },
                        {
                            name: '‚ùó ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
                            value: `${description ?? '\u200B'}`
                        }
                    )
                    .setColor(Colors.White)
                    .setTimestamp()
            ]
        })
    }
}